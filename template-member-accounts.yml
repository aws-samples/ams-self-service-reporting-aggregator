---
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
AWSTemplateFormatVersion: "2010-09-09"
Description: https://github.com/aws-samples/ams-self-service-reporting-aggregator
Parameters:
  ReportAggregatorBucketName:
    Type: String
    Description: The S3 Bucket Name in which reports will be aggregated
  ReportAggregatorKMSKeyArn:
    Type: String
    AllowedPattern: ^arn:.+:kms:.+:\d{12}:key\/[a-fA-F0-9\-]+$
    Description: The ARN of the KMS Key Encrypting files in the aggregator bucket
Resources:
  ExplicitDenyAMSResourcesPolicy:
    # AMS deploys resources into customer accounts which are necessary for the operation
    # of the AMS Service. This policy, when attached to IAM Roles in this template, prevents those
    # Principals from mutating AMS Managed Resources through the use of explicit deny statements.
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Explicitly denies CloudWatch actions on AMS Management Resources
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ExplicitDenyAMSManagedLogResources
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/AMS/*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/Ams/*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ams/*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/AMS*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/Ams*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ams*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/AMS*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Ams*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ams*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/mc/*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/MC/*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/Mc/*
  ReportAggregatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Triggered by S3 Object Create. Copies files from source to desintation bucket
      Handler: index.lambda_handler
      Role: !GetAtt ReportAggregatorFunctionRole.Arn
      Runtime: python3.9
      Timeout: 10
      ReservedConcurrentExecutions: 4
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"
          REPORT_AGGREGATE_BUCKET_NAME: !Ref ReportAggregatorBucketName
      Code:
        ZipFile: |
          import os
          import re
          import urllib.parse
          import boto3

          AWS_ACCOUNT_ID = os.getenv("AWS_ACCOUNT_ID")
          REPORT_AGGREGATE_BUCKET_NAME = os.getenv("REPORT_AGGREGATE_BUCKET_NAME")

          PATCH_DETAILS_REGEX = r"^json\/patch\/patch_details\/Date=(\d{4}-\d{2}-\d{2})\/(.+).json$"
          WINDOWS_MISSING_REGEX = r"^json\/patch\/windows_missing_patches\/Date=(\d{4}-\d{2}-\d{2})\/(.+).json$"
          INSTANCE_DETAILS_REGEX = r"^json\/patch\/instance_details_patch_orchestrator\/Date=(\d{4}-\d{2}-\d{2})\/(.+).json$"
          DAILY_BACKUP_REGEX = r"^json\/backup\/daily_backup_report\/Date=(\d{4}-\d{2}-\d{2})\/(.+).json$"
          WEEKLY_INCIDENT_REPORT_REGEX = r"^json\/incident\/weekly_incident_report\/Date=(\d{4}-\d{2}-\d{2})\/(.+).json$"

          s3_resource = boto3.resource("s3")

          def lambda_handler(event, context):

            source_bucket_name = ""
            source_bucket_key = ""
            report_type = ""

            try:
              # Store the key of the object that was placed in the bucket
              source_bucket_name = event["Records"][0]["s3"]["bucket"]["name"]
              source_bucket_key = urllib.parse.unquote_plus(event["Records"][0]["s3"]["object"]["key"], encoding="utf-8")
              
              # Converts a string like "json/patch/patch_details/../.../... => "patch/patchdetails"
              report_type = "/".join(source_bucket_key.split("/",3)[1:3]).replace("_","")
            except Exception as e:
              print(f"Unable to identify the report type for S3 Key '{source_bucket_key}'")
            
            # Define which Regex to use based on the object put in S3
            key_to_regex_mapping = {
              "patch/patchdetails": PATCH_DETAILS_REGEX,
              "patch/windowsmissingpatches": WINDOWS_MISSING_REGEX,
              "patch/instancedetailspatchorchestrator": INSTANCE_DETAILS_REGEX,
              "backup/dailybackupreport": DAILY_BACKUP_REGEX,
              "incident/weeklyincidentreport": WEEKLY_INCIDENT_REPORT_REGEX,
            }

            regex_to_use = ""
            try:
              regex_to_use = key_to_regex_mapping[report_type]
            except KeyError:
              print(f"There was no matching Regex defined to process the S3 Key '{source_bucket_key}'")
              return

            # Parse the string with the determined regex
            key_matches = re.split(regex_to_use, source_bucket_key)
            

            if len(key_matches) == 4:
              filename = urllib.parse.quote(key_matches[2], encoding="utf-8")
              destination_s3_key = f"{report_type}/reportdate={key_matches[1]}/awsaccountid={AWS_ACCOUNT_ID}/{filename}.json" 

              try:
                destination_bucket = s3_resource.Bucket(REPORT_AGGREGATE_BUCKET_NAME)
                destination_bucket.copy({ "Bucket" : source_bucket_name, "Key" : source_bucket_key}, destination_s3_key)
                print("Copy Operation Successful:")
              except Exception as e:
                print("An error occured when attempting to copy a file between S3 Buckets")
                print(e)
              finally:
                print(f"SOURCE: s3://{source_bucket_name}/{source_bucket_key}")
                print(f"DESTINATION: s3://{REPORT_AGGREGATE_BUCKET_NAME}/{destination_s3_key}")
            
            else:
              print(f"The filename of {source_bucket_key} was not matched by regex, and the file was not aggregated")
  ReportAggregatorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref ExplicitDenyAMSResourcesPolicy
  ReportAggregatorFunctionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:s3:::ams-reporting-data-a${AWS::AccountId}/*"
          - Action: s3:PutObject
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:s3:::${ReportAggregatorBucketName}/*"
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:ReEncrypt*
            Effect: Allow
            Resource: !Ref ReportAggregatorKMSKeyArn
      PolicyName: ReportAggregatorFunctionRolePolicy
      Roles:
        - !Ref ReportAggregatorFunctionRole
  ReportAggregatorFunctionDecryptAMSSSRPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - kms:Decrypt
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/*
            Condition:
              "ForAnyValue:StringLike":
                "kms:ResourceAliases": "alias/AmsCustomerReportsBucketKmsKey"
      PolicyName: ReportAggregatorFunctionDecryptAMSSSRPolicy
      Roles:
        - !Ref ReportAggregatorFunctionRole
  ReportAggregatorFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ReportAggregatorFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:${AWS::Partition}:s3:::ams-reporting-data-a${AWS::AccountId}"
  S3LambdaIntegrationCustomResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: CloudFormation Custom Resource to apply an S3 Event Notification Configuration to an existing S3 bucket
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          s3 = boto3.client("s3")

          def lambda_handler(event, context):
            response_data={}
            try:
              if event["RequestType"] == "Delete":
                # Remove the Notification Configuration
                bucket_name = event["ResourceProperties"]["Bucket"]
                delete_notification(bucket_name)
              elif event["RequestType"] == "Create" or event["RequestType"] == "Update":
                # Add/Modify the Notification Configuration
                bucket_name = event["ResourceProperties"]["Bucket"]
                lambda_arn = event["ResourceProperties"]["LambdaArn"]
                add_notification(lambda_arn, bucket_name)
                response_data={"Bucket":bucket_name}
              response_status = SUCCESS

            except Exception as e:
              print("Failed to process:", e)
              response_status = FAILED
              response_data = {"Failure": "The S3 Bucket Notification was unable to be put."}

            finally:
              cfnresponse.send(event, context, response_status, response_data)

          def add_notification(lambda_arn, bucket_name):
            s3.put_bucket_notification_configuration(
              Bucket=bucket_name,
              NotificationConfiguration={
                "LambdaFunctionConfigurations": [
                  {
                    "LambdaFunctionArn": lambda_arn,
                    "Events": ["s3:ObjectCreated:*"],
                    "Filter": {
                      "Key": {
                        "FilterRules": [
                          { "Name": "suffix", "Value" : ".json" }
                        ],
                      },
                    },
                  },
                ],
              },
            )
            print("Put Bucket Configuration")

          def delete_notification(bucket_name):
            s3.put_bucket_notification_configuration(
              Bucket=bucket_name,
              NotificationConfiguration={},
            )
            print("Deleted Bucket Configuration")
      Handler: index.lambda_handler
      Role: !GetAtt S3LambdaIntegrationCustomResourceFunctionRole.Arn
      Runtime: python3.9
      Timeout: 60
      ReservedConcurrentExecutions: 1
  S3LambdaIntegrationCustomResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - !Ref ExplicitDenyAMSResourcesPolicy
  S3LambdaIntegrationCustomResourceFunctionRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Action:
              - s3:GetBucketNotification
              - s3:PutBucketNotification
            Effect: Allow
            Resource: !Sub "arn:${AWS::Partition}:s3:::ams-reporting-data-a${AWS::AccountId}"
        Version: "2012-10-17"
      PolicyName: S3LambdaIntegrationCustomResourceFunctionRolePolicy
      Roles:
        - !Ref S3LambdaIntegrationCustomResourceFunctionRole
  ApplyS3NotificationConfigurationCustomResource:
    Type: "Custom::ApplyS3NotificationConfiguration"
    DependsOn:
      - ReportAggregatorFunction
      - ReportAggregatorFunctionRole
      - ReportAggregatorFunctionRolePolicy
      - ReportAggregatorFunctionDecryptAMSSSRPolicy
      - ReportAggregatorFunctionInvokePermission
    Properties:
      ServiceToken: !GetAtt S3LambdaIntegrationCustomResourceFunction.Arn
      LambdaArn: !GetAtt ReportAggregatorFunction.Arn
      Bucket: !Sub ams-reporting-data-a${AWS::AccountId}

